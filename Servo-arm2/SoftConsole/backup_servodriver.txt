//example softconsole main.c
/*******************************************************************************
 * (c) Copyright 2015 Microsemi SoC Products Group.  All rights reserved.
 *
 * This example project demonstrates control  control the duty cycle of
 * individual PWM outputs
 *
 * Please refer to the file README.txt for further details about this example.
 *
 * SVN $Revision: 8042 $
 * SVN $Date: 2015-10-15 17:55:12 +0530 (Thu, 15 Oct 2015) $
 */
#include "platform.h"
#include "core_pwm.h"
#include "stdio.h"

# define VERBOSEDEBUGCONSOLE //Verbose debugging in console
/******************************************************************************
 * Delay count used to time the delay between duty cycle updates.
 *****************************************************************************/
#define DELAY_COUNT     10000  //period for the delay counts

/******************************************************************************
 * PWM prescale and period configuration values.
 *****************************************************************************/
#define PWM_PRESCALE 49  //Prescale value 4
#define PWM_PERIOD 399 //full period

/******************************************************************************
 * Servo Operation Parameters
 *****************************************************************************/
#define MAX_DEFLECT 52.0 //max deflection of servo (pwm value) (use whole number with decimal for float calc)
#define MIN_DEFLECT 6.0 //min deflection of servo (pwm value) (use whole number with decimal for float calc)
#define ROTATION_DEGREES 170.0 //Servo physical rotation span (degrees) (use whole number with decimal for float calc)

//Trim Parameters for each servo to correct differences between units for identical performance
#define TRIM_ROT_DEG_GAIN_1 1.0
#define TRIM_ROT_DEG_OFFSET_1 0.0
#define TRIM_MIN_1_PWM 6.0
#define TRIM_MAX_1_PWM -8.0

#define TRIM_ROT_DEG_GAIN_2 1.0
#define TRIM_ROT_DEG_OFFSET_2 0.0
#define TRIM_MIN_2_PWM 6.0
#define TRIM_MAX_2_PWM -8.0

#define TRIM_ROT_DEG_GAIN_3 1.0
#define TRIM_ROT_DEG_OFFSET_3 0.0
#define TRIM_MIN_3_PWM 6.0
#define TRIM_MAX_3_PWM -8.0

#define TRIM_ROT_DEG_GAIN_4 1.0
#define TRIM_ROT_DEG_OFFSET_4 0.0
#define TRIM_MIN_4_PWM 6.0
#define TRIM_MAX_4_PWM -8.0

#define TRIM_ROT_DEG_GAIN_5 1.0
#define TRIM_ROT_DEG_OFFSET_5 0.0
#define TRIM_MIN_5_PWM 6.0
#define TRIM_MAX_5_PWM -8.0

#define TRIM_ROT_DEG_GAIN_6 1.0
#define TRIM_ROT_DEG_OFFSET_6 0.0
#define TRIM_MIN_6_PWM 5.0
#define TRIM_MAX_6_PWM -8.0


/******************************************************************************
 * CorePWM instance data.
 *****************************************************************************/
pwm_instance_t the_pwm;

/******************************************************************************
 * Local function prototype.
 *****************************************************************************/
void delay( int mult );
float set_deg_inc(float deg_new, float deg_old, int dir, float stepsize, int delay_len, int servo_num);
void set_deg_abs(float deg, int pwmnum);

/******************************************************************************
 * main function.
 *****************************************************************************/
int main( void )
{
    uint32_t duty_cycle = 1;
    int direction = 1;

    /**************************************************************************
     * Initialize the CorePWM instance setting the prescale and period values.
     *************************************************************************/
    PWM_init( &the_pwm, COREPWM_BASE_ADDR, PWM_PRESCALE, PWM_PERIOD ) ;

    /**************************************************************************
     * Set the initial duty cycle for CorePWM output 1.
     *************************************************************************/


    while ( 1 )
    {
    	set_deg_abs(0, 6); //Send servo 6 to 0 degrees
    	delay (200);
    	delay (200);// Delay to allow Reposition after request to return to zero
    	delay (200);
    	delay (200);
    	set_deg_abs(10, 6);  //Send servo 6 to new position
    	delay (200);  //Allow positioning delay
    	set_deg_abs(20, 6);  //Send servo 6 to new position
    	delay (200);  //Allow positioning delay
    	set_deg_abs(30, 6);  //Send servo 6 to new position
    	delay (200);  //Allow positioning delay
    	set_deg_abs(40, 6);  //Send servo 6 to new position
    	delay (200);  //Allow positioning delay
    	set_deg_abs(50, 6);  //Send servo 6 to new position
    	delay (200);  //Allow positioning delay
    	set_deg_abs(60, 6);  //Send servo 6 to new position
    	delay (200);  //Allow positioning delay
    	set_deg_inc(180.0,61.0,1,0.5,20,6);  //Send servo 6 to new position using incremental motion algorithm
    	delay (200);
    	delay (200);
    	delay (200);
    	set_deg_inc(0.0,180.0,0,0.5,20,6);  //Send servo 6 to new position using incremental motion algorithm
    	delay (200);
#ifdef VERBOSEDEBUGCONSOLE
    	//message to console
#endif
    }

}

/******************************************************************************
 * Delay function.
 *****************************************************************************/
void delay( int mult )
{
    volatile int counter = 0;

    while ( counter < (DELAY_COUNT*mult) )
    {
        counter++;
    }
}
/******************************************************************************
 * ABS Motion Function.
 *****************************************************************************/

void set_deg_abs(float deg, int pwmnum)
{
	    float deg_position_duty;

		//Drive Servo with PWM value after calculation with requested degree and trim parameters for each servo
		if (pwmnum==1)
		{
			deg_position_duty=((((MAX_DEFLECT+TRIM_MAX_1_PWM)-(MIN_DEFLECT+TRIM_MIN_1_PWM))/(ROTATION_DEGREES))*(((TRIM_ROT_DEG_GAIN_1)*deg)+TRIM_ROT_DEG_OFFSET_1))+(MIN_DEFLECT+TRIM_MIN_1_PWM);
			PWM_set_duty_cycle( &the_pwm, PWM_1, (int)deg_position_duty);//Set position of servo 1
		}

		else if (pwmnum==2)
		{
			deg_position_duty=((((MAX_DEFLECT+TRIM_MAX_2_PWM)-(MIN_DEFLECT+TRIM_MIN_2_PWM))/(ROTATION_DEGREES))*(((TRIM_ROT_DEG_GAIN_2)*deg)+TRIM_ROT_DEG_OFFSET_2))+(MIN_DEFLECT+TRIM_MIN_2_PWM);
			PWM_set_duty_cycle( &the_pwm, PWM_2, (int)deg_position_duty);//Set position of servo 2
		}

		else if (pwmnum==3)
		{
			deg_position_duty=((((MAX_DEFLECT+TRIM_MAX_3_PWM)-(MIN_DEFLECT+TRIM_MIN_3_PWM))/(ROTATION_DEGREES))*(((TRIM_ROT_DEG_GAIN_3)*deg)+TRIM_ROT_DEG_OFFSET_3))+(MIN_DEFLECT+TRIM_MIN_3_PWM);
			PWM_set_duty_cycle( &the_pwm, PWM_3, (int)deg_position_duty);//Set position of servo 3
		}

		else if (pwmnum==4)
		{
			deg_position_duty=((((MAX_DEFLECT+TRIM_MAX_4_PWM)-(MIN_DEFLECT+TRIM_MIN_4_PWM))/(ROTATION_DEGREES))*(((TRIM_ROT_DEG_GAIN_4)*deg)+TRIM_ROT_DEG_OFFSET_4))+(MIN_DEFLECT+TRIM_MIN_4_PWM);
			PWM_set_duty_cycle( &the_pwm, PWM_4, (int)deg_position_duty);//Set position of servo 4
		}

		else if (pwmnum==5)
		{
			deg_position_duty=((((MAX_DEFLECT+TRIM_MAX_5_PWM)-(MIN_DEFLECT+TRIM_MIN_5_PWM))/(ROTATION_DEGREES))*(((TRIM_ROT_DEG_GAIN_5)*deg)+TRIM_ROT_DEG_OFFSET_5))+(MIN_DEFLECT+TRIM_MIN_5_PWM);
			PWM_set_duty_cycle( &the_pwm, PWM_5, (int)deg_position_duty);//Set position of servo 5
		}

		else if (pwmnum==6)
		{
			deg_position_duty=((((MAX_DEFLECT+TRIM_MAX_6_PWM)-(MIN_DEFLECT+TRIM_MIN_6_PWM))/(ROTATION_DEGREES))*(((TRIM_ROT_DEG_GAIN_6)*deg)+TRIM_ROT_DEG_OFFSET_6))+(MIN_DEFLECT+TRIM_MIN_6_PWM);
			PWM_set_duty_cycle( &the_pwm, PWM_6, (int)deg_position_duty);//Set position of servo 6
		}
		else
		{}  //end if statement


}

float set_deg_inc(float deg_new, float deg_old, int dir, float stepsize, int delay_len, int servo_num)
{
	float holder;
	if (dir==1)
	{
	for (float i = deg_old; i <= (float)deg_new; i = (float)i + (float)stepsize)
		{
		set_deg_abs(i, servo_num);
		delay(delay_len);
		holder=i;
		}
	}
	else if (dir==0)
	{
		for (float i = deg_old; i >= (float)deg_new; i = (float)i - (float)stepsize)
			{
			set_deg_abs(i, servo_num);
			delay(delay_len);
			holder=i;
			}
	}
	return holder; //keep track of position to prevent loss of location
}




